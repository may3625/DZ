#!/bin/bash

# Script de test pour la carte de l'Alg√©rie
# Teste le bon fonctionnement de la carte choropl√®the

echo "üß™ Test de la carte de l'Alg√©rie - Carte Choropl√®the"
echo "=================================================="

# Variables pour compter les r√©sultats
SUCCESS_COUNT=0
WARNING_COUNT=0
ERROR_COUNT=0

# V√©rifier que le composant existe
if [ ! -f "src/components/analytics/AlgeriaChoroplethProfessional.tsx" ]; then
    echo "‚ùå ERREUR: Le composant AlgeriaChoroplethProfessional.tsx n'existe pas"
    ERROR_COUNT=$((ERROR_COUNT + 1))
else
    echo "‚úÖ Composant AlgeriaChoroplethProfessional.tsx trouv√©"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
fi

# V√©rifier que le GeoJSON existe
if [ ! -f "public/algeria-wilayas-simplified.geo.json" ]; then
    echo "‚ùå ERREUR: Le fichier GeoJSON algeria-wilayas-simplified.geo.json n'existe pas"
    ERROR_COUNT=$((ERROR_COUNT + 1))
else
    echo "‚úÖ Fichier GeoJSON algeria-wilayas-simplified.geo.json trouv√©"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
fi

# V√©rifier la taille du GeoJSON (doit √™tre > 1MB)
GEOJSON_SIZE=$(stat -c%s "public/algeria-wilayas-simplified.geo.json" 2>/dev/null || stat -f%z "public/algeria-wilayas-simplified.geo.json" 2>/dev/null)
if [ "$GEOJSON_SIZE" -lt 1000000 ]; then
    echo "‚ö†Ô∏è  ATTENTION: Le fichier GeoJSON semble trop petit ($GEOJSON_SIZE bytes)"
    WARNING_COUNT=$((WARNING_COUNT + 1))
else
    echo "‚úÖ Fichier GeoJSON de taille correcte ($GEOJSON_SIZE bytes)"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
fi

# V√©rifier que les migrations existent
if [ ! -f "supabase/migrations/20250115000000_insert_algeria_wilayas.sql" ]; then
    echo "‚ùå ERREUR: Migration des wilayas manquante"
    ERROR_COUNT=$((ERROR_COUNT + 1))
else
    echo "‚úÖ Migrations SQL trouv√©es"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
fi

if [ ! -f "supabase/migrations/20250115000001_insert_demo_legal_texts.sql" ]; then
    echo "‚ùå ERREUR: Migration des donn√©es de d√©monstration manquante"
    ERROR_COUNT=$((ERROR_COUNT + 1))
else
    echo "‚úÖ Migration des donn√©es de d√©monstration trouv√©e"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
fi

# V√©rifier que la section a √©t√© mise √† jour
if grep -q "AlgeriaChoroplethProfessional" "src/components/analytics/AlgeriaDensitySection.tsx"; then
    echo "‚úÖ Section AlgeriaDensitySection mise √† jour"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Section AlgeriaDensitySection non mise √† jour"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

# V√©rifier les d√©pendances dans package.json
if grep -q "react-simple-maps" "package.json"; then
    echo "‚úÖ D√©pendance react-simple-maps trouv√©e"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ö†Ô∏è  ATTENTION: D√©pendance react-simple-maps manquante dans package.json"
    WARNING_COUNT=$((WARNING_COUNT + 1))
fi

if grep -q "d3-geo" "package.json"; then
    echo "‚úÖ D√©pendance d3-geo trouv√©e"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ö†Ô∏è  ATTENTION: D√©pendance d3-geo manquante dans package.json"
    WARNING_COUNT=$((WARNING_COUNT + 1))
fi

# V√©rifier la structure du composant
echo ""
echo "üîç V√©rification de la structure du composant..."

# V√©rifier les imports essentiels
if grep -q "import.*ComposableMap" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Import ComposableMap trouv√©"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Import ComposableMap manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

if grep -q "import.*Geographies" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Import Geographies trouv√©"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Import Geographies manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

if grep -q "import.*supabase" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Import Supabase trouv√©"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Import Supabase manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

# V√©rifier les fonctionnalit√©s cl√©s
if grep -q "mapModes.*useMemo" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Modes de carte configur√©s"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Modes de carte non configur√©s"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

if grep -q "aspect-\[4/5\]" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Aspect ratio vertical configur√© (4/5)"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Aspect ratio vertical non configur√©"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

if grep -q "handleWilayaHover" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Gestionnaire de survol configur√©"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Gestionnaire de survol manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

if grep -q "handleWilayaClick" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Gestionnaire de clic configur√©"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Gestionnaire de clic manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

# V√©rifier l'insertion des wilayas
if grep -q "58 wilayas" "src/components/analytics/AlgeriaChoroplethProfessional.tsx"; then
    echo "‚úÖ Insertion des 58 wilayas configur√©e"
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
else
    echo "‚ùå ERREUR: Insertion des 58 wilayas non configur√©e"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

echo ""
echo "üìä R√©sum√© des tests:"
echo "===================="

echo "‚úÖ Tests r√©ussis: $SUCCESS_COUNT"
echo "‚ö†Ô∏è  Avertissements: $WARNING_COUNT"
echo "‚ùå Erreurs: $ERROR_COUNT"

if [ "$ERROR_COUNT" -eq 0 ]; then
    echo ""
    echo "üéâ Tous les tests sont pass√©s avec succ√®s !"
    echo "La carte de l'Alg√©rie est pr√™te √† √™tre utilis√©e."
    echo ""
    echo "üìã Prochaines √©tapes:"
    echo "1. Ex√©cuter les migrations SQL dans Supabase"
    echo "2. D√©marrer l'application"
    echo "3. Naviguer vers l'onglet 'Carte Choropl√®the'"
    echo "4. Tester les interactions (survol, clic, zoom)"
    echo "5. V√©rifier les 3 modes d'affichage"
else
    echo ""
    echo "‚ùå Certains tests ont √©chou√©. Veuillez corriger les erreurs avant de continuer."
    exit 1
fi

echo ""
echo "üîß Pour ex√©cuter les migrations SQL:"
echo "1. Aller dans l'interface Supabase"
echo "2. Naviguer vers SQL Editor"
echo "3. Ex√©cuter: supabase/migrations/20250115000000_insert_algeria_wilayas.sql"
echo "4. Ex√©cuter: supabase/migrations/20250115000001_insert_demo_legal_texts.sql"
echo ""
echo "üöÄ Pour d√©marrer l'application:"
echo "npm run dev"
echo ""
echo "üì± URL de test: http://localhost:5173 (ou le port configur√©)"