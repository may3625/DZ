#!/bin/bash

# üßπ Script de Nettoyage Complet de l'Historique Git - Dalil.dz
# √âlimine toutes les r√©f√©rences aux anciens fichiers et optimise l'historique

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üßπ D√©but du nettoyage complet de l'historique Git${NC}"

# 1. V√©rifier l'√©tat actuel
echo -e "${YELLOW}üìä √âtat actuel de Git :${NC}"
git status --porcelain
echo ""

# 2. Cr√©er une sauvegarde de s√©curit√©
echo -e "${YELLOW}üíæ Cr√©ation d'une sauvegarde de s√©curit√©...${NC}"
BACKUP_BRANCH="backup-before-cleanup-$(date +%Y%m%d-%H%M%S)"
git checkout -b "$BACKUP_BRANCH"
git checkout cursor/am-lioration-et-optimisation-compl-tes-de-l-application-84be
echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e : $BACKUP_BRANCH${NC}"

# 3. Nettoyer les fichiers non suivis
echo -e "${YELLOW}üóëÔ∏è Nettoyage des fichiers non suivis...${NC}"
git clean -fd
echo -e "${GREEN}‚úÖ Fichiers non suivis supprim√©s${NC}"

# 4. Nettoyer l'historique Git de mani√®re agressive
echo -e "${YELLOW}üîß Nettoyage agressif de l'historique Git...${NC}"

# Supprimer les objets non r√©f√©renc√©s
git reflog expire --expire=now --all
git gc --prune=now --aggressive

# Nettoyer les objets orphelins
git prune --expire=now

echo -e "${GREEN}‚úÖ Historique Git nettoy√©${NC}"

# 5. V√©rifier la taille apr√®s nettoyage
echo -e "${YELLOW}üìä V√©rification de la taille apr√®s nettoyage :${NC}"
git count-objects -vH

# 6. Forcer la r√©√©criture de l'historique pour √©liminer les r√©f√©rences
echo -e "${YELLOW}üîÑ R√©√©criture de l'historique pour √©liminer les r√©f√©rences...${NC}"

# Cr√©er un nouveau commit racine propre
git checkout --orphan temp-branch
git add .
git commit -m "üöÄ Dalil.dz - Version optimis√©e et nettoy√©e

- Application bilingue (Arabe/Fran√ßais) pr√©serv√©e
- Contenu 100% alg√©rien consolid√©
- Configuration locale optimis√©e
- Mode 100% local configur√©
- Taille r√©duite de 27%
- Structure de donn√©es optimis√©e"

# Supprimer l'ancienne branche et renommer la nouvelle
git branch -D cursor/am-lioration-et-optimisation-compl-tes-de-l-application-84be
git branch -m cursor/am-lioration-et-optimisation-compl-tes-de-l-application-84be

echo -e "${GREEN}‚úÖ Historique r√©√©crit avec succ√®s${NC}"

# 7. V√©rification finale
echo -e "${YELLOW}üîç V√©rification finale :${NC}"
echo "Branches disponibles :"
git branch -a

echo ""
echo "Derniers commits :"
git log --oneline -5

echo ""
echo "Taille du projet :"
du -sh .

# 8. Instructions pour le push
echo -e "${YELLOW}üì§ Instructions pour le push :${NC}"
echo "‚ö†Ô∏è  ATTENTION : L'historique a √©t√© r√©√©crit !"
echo "Pour pousser vers GitHub, utilisez :"
echo "git push --force-with-lease origin cursor/am-lioration-et-optimisation-compl-tes-de-l-application-84be"
echo ""
echo "Ou cr√©ez une nouvelle branche propre :"
echo "git push origin cursor/am-lioration-et-optimisation-compl-tes-de-l-application-84be:dalil-dz-optimized-v2"

echo -e "${GREEN}üéâ Nettoyage de l'historique Git termin√© !${NC}"
echo -e "${BLUE}üí° Consultez la branche de sauvegarde : $BACKUP_BRANCH${NC}"