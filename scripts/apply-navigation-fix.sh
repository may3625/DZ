#!/bin/bash

# üîß Script d'Application des Corrections de Navigation - Dalil.dz
# Applique automatiquement les composants optimis√©s pour r√©soudre le probl√®me de double-clic

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîß Application des corrections de navigation pour Dalil.dz${NC}"
echo "================================================================"
echo ""

# Cr√©er un dossier de sauvegarde
BACKUP_DIR="./backup-navigation-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Fonction pour sauvegarder un fichier
backup_file() {
    local file="$1"
    if [ -f "$file" ]; then
        local backup_path="$BACKUP_DIR/$(dirname "$file")"
        mkdir -p "$backup_path"
        cp "$file" "$backup_path/"
        echo -e "${YELLOW}üíæ Sauvegard√© : $file${NC}"
    fi
}

# Fonction pour cr√©er un dossier
create_dir() {
    local dir="$1"
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        echo -e "${GREEN}üìÅ Dossier cr√©√© : $dir${NC}"
    fi
}

echo -e "${YELLOW}üìÅ Cr√©ation des dossiers n√©cessaires...${NC}"

# Cr√©er les dossiers pour les nouveaux composants
create_dir "src/hooks"
create_dir "src/components/ui"
create_dir "src/components/navigation"

echo -e "${YELLOW}üîß Application des corrections de navigation...${NC}"

# 1. V√©rifier que les composants optimis√©s existent
if [ ! -f "src/hooks/useOptimizedNavigation.ts" ]; then
    echo -e "${RED}‚ùå Fichier useOptimizedNavigation.ts manquant${NC}"
    echo "Veuillez d'abord cr√©er ce fichier avec le contenu fourni"
    exit 1
fi

if [ ! -f "src/components/ui/OptimizedBackButton.tsx" ]; then
    echo -e "${RED}‚ùå Fichier OptimizedBackButton.tsx manquant${NC}"
    echo "Veuillez d'abord cr√©er ce fichier avec le contenu fourni"
    exit 1
fi

if [ ! -f "src/components/navigation/OptimizedNavigation.tsx" ]; then
    echo -e "${RED}‚ùå Fichier OptimizedNavigation.tsx manquant${NC}"
    echo "Veuillez d'abord cr√©er ce fichier avec le contenu fourni"
    exit 1
fi

echo -e "${GREEN}‚úÖ Tous les composants optimis√©s sont pr√©sents${NC}"

# 2. Sauvegarder et modifier Index.tsx
echo -e "${BLUE}üìù Modification de Index.tsx...${NC}"

if [ -f "src/pages/Index.tsx" ]; then
    backup_file "src/pages/Index.tsx"
    
    # Cr√©er une version modifi√©e avec la navigation optimis√©e
    cat > "src/pages/Index.tsx" << 'EOF'
import { useState, useEffect, useCallback, useMemo } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { MainNavigation } from "@/components/MainNavigation";
import { Footer } from "@/components/Footer";
import { OptimizedNavigation } from "@/components/navigation/OptimizedNavigation";
import { GovernmentHeader } from "@/components/layout/GovernmentHeader";
import { MainHeader } from "@/components/layout/MainHeader";
import { ContentRenderer } from "@/components/layout/ContentRenderer";
import { supabase } from "@/integrations/supabase/client";

const VALID_SECTIONS = new Set([
  "dashboard", "legal-catalog", "legal-enrichment", "legal-search",
  "procedures-catalog", "procedures-enrichment", "procedures-search", "procedures-resources",
  "analytics-dashboards", "analysis", "reports", "assisted-writing",
  "analytics-algeria",
  "forum", "collaborative-workspace", "shared-resources",
  "news", "library", "dictionaries", "directories",
  "nomenclature", "algerian-enhancements", "complementary-resources", "data-management", "alerts-notifications", "user-management",
  "security", "performance-scalability", "integrations-interoperability", "accessibility-settings", "offline-mode", "mobile-app", "sources-management", "sources",
  "about", "contact", "technical-support", "privacy-policy", "terms-of-use", "messages", "ai-advanced", "favorites",
  "data-extraction", "document-templates", "saved-searches",
  "ai-assistant", "admin",
  "ocr-extraction", "ocr-mapping", "ocr-validation", "ocr-workflow", "ocr-analytics",
"batch-processing", "approval-workflow", "ocr-analytics-reports", "ocr-diagnostics",
"modal-test", "optimization-dashboard"
]);

const Index = () => {
  const { section } = useParams();
  const navigate = useNavigate();
  const [activeSection, setActiveSection] = useState(section || "dashboard");
  const [language, setLanguage] = useState("fr");
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  // Sync activeSection with URL
  useEffect(() => {
    const urlSection = (section || "dashboard").split('/')[0];
    if (VALID_SECTIONS.has(urlSection) && urlSection !== activeSection) {
      setActiveSection(urlSection);
    }
    if (!VALID_SECTIONS.has(urlSection)) {
      setActiveSection("__not_found__");
    }
  }, [section, activeSection]);

  // Navigation with browser history
  const handleSectionChange = useCallback((newSection: string) => {
    console.log('Attempting to navigate to section:', newSection);
    
    if (typeof newSection !== 'string' || newSection.includes('http://') || newSection.includes('https://')) {
      console.warn(`Section invalide ou URL externe d√©tect√©e: ${newSection}`);
      return;
    }
    
    if (VALID_SECTIONS.has(newSection)) {
      try {
        if (newSection === "dashboard") {
          navigate("/", { replace: false });
        } else {
          navigate(`/${newSection}`, { replace: false });
        }
        console.log('Successfully navigated to section:', newSection);
      } catch (error) {
        console.error('Navigation error:', error);
      }
    } else {
      console.warn(`Section invalide tent√©e: ${newSection}`);
      setActiveSection("__not_found__");
      navigate(`/${newSection}`, { replace: false });
    }
  }, [navigate]);

  // Gestionnaire de changement de langue m√©moris√©
  const handleLanguageChange = useCallback((newLanguage: string) => {
    setLanguage(newLanguage);
  }, []);

  // Fonction de refresh pour l'auto-refresh
  const handleRefresh = useCallback(() => {
    setRefreshTrigger(prev => prev + 1);
    console.log('Page refreshed via auto-refresh');
  }, []);

  // Props m√©moris√©es pour √©viter les re-rendus inutiles
  const headerProps = useMemo(() => ({
    language,
    activeSection,
    onLanguageChange: handleLanguageChange,
    onSectionChange: handleSectionChange
  }), [language, activeSection, handleLanguageChange, handleSectionChange]);

  const navigationProps = useMemo(() => ({
    onSectionChange: handleSectionChange,
    activeSection,
    language
  }), [handleSectionChange, activeSection, language]);

  return (
    <div className="min-h-screen w-full algerian-green-bg flex flex-col">
        {/* Skip to main content link pour l'accessibilit√© */}
        <a 
          href="#main-content" 
          className="sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 z-50"
        >
          Aller au contenu principal
        </a>

        {/* Header gouvernemental */}
        <GovernmentHeader language={language} onLanguageChange={handleLanguageChange} />

        {/* Header principal */}
        <MainHeader {...headerProps} />

        {/* Menu de navigation principal - Hidden on mobile */}
        <div className="hidden md:block">
          <MainNavigation {...navigationProps} />
        </div>

        {/* Navigation optimis√©e avec boutons de retour */}
        {activeSection !== "__not_found__" && activeSection !== "dashboard" && (
          <OptimizedNavigation 
            currentSection={activeSection}
            onSectionChange={handleSectionChange}
            language={language}
            showBackButton={true}
            showHomeButton={true}
          />
        )}

        {/* Main Content avec landmark ARIA */}
        <main id="main-content" className="flex-grow bg-gray-50" role="main" aria-label="Contenu principal">
          <div className="container mx-auto px-4 sm:px-6 py-6 max-w-7xl">
            <ContentRenderer activeSection={activeSection} language={language} refreshTrigger={refreshTrigger} />
          </div>
        </main>

        {/* Footer */}
        <Footer onSectionChange={handleSectionChange} />
      </div>
  );
};

export default Index;
EOF

    echo -e "${GREEN}‚úÖ Index.tsx modifi√© avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Fichier Index.tsx non trouv√©${NC}"
fi

# 3. Cr√©er un composant de test pour valider la navigation
echo -e "${BLUE}üß™ Cr√©ation d'un composant de test...${NC}"

cat > "src/components/TestNavigation.tsx" << 'EOF'
import React from 'react';
import { OptimizedBackButton } from '@/components/ui/OptimizedBackButton';
import { useOptimizedNavigation } from '@/hooks/useOptimizedNavigation';

interface TestNavigationProps {
  currentSection: string;
  language?: string;
}

export function TestNavigation({ currentSection, language = "fr" }: TestNavigationProps) {
  const { navigateToSection, goBack, goHome, canGoBack, isNavigating } = 
    useOptimizedNavigation(currentSection);

  return (
    <div className="p-4 border border-gray-200 rounded-lg bg-gray-50">
      <h3 className="text-lg font-semibold mb-4">Test de Navigation Optimis√©e</h3>
      
      <div className="space-y-4">
        <div>
          <h4 className="font-medium mb-2">Section actuelle : {currentSection}</h4>
          <p className="text-sm text-gray-600">
            Historique : {canGoBack ? 'Disponible' : 'Vide'} | 
            Navigation : {isNavigating ? 'En cours...' : 'Pr√™te'}
          </p>
        </div>

        <div className="flex gap-2">
          <OptimizedBackButton 
            currentSection={currentSection}
            showHomeButton={true}
            language={language}
          />
        </div>

        <div className="grid grid-cols-2 gap-2">
          <button
            onClick={() => navigateToSection('legal-catalog')}
            className="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Aller √† Legal Catalog
          </button>
          
          <button
            onClick={() => navigateToSection('procedures-catalog')}
            className="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600"
          >
            Aller √† Procedures
          </button>
        </div>

        <div className="text-xs text-gray-500">
          <p>‚úÖ Testez la navigation en cliquant sur les boutons</p>
          <p>‚úÖ Le bouton "Retour" devrait fonctionner en un seul clic</p>
          <p>‚úÖ Protection contre les doubles clics activ√©e</p>
        </div>
      </div>
    </div>
  );
}

export default TestNavigation;
EOF

echo -e "${GREEN}‚úÖ Composant de test cr√©√©${NC}"

# 4. Cr√©er un fichier de configuration pour la navigation
echo -e "${BLUE}‚öôÔ∏è Cr√©ation de la configuration de navigation...${NC}"

cat > "src/config/navigation.ts" << 'EOF'
/**
 * Configuration de la navigation optimis√©e pour Dalil.dz
 * R√©sout le probl√®me de double-clic sur le bouton retour
 */

export const NAVIGATION_CONFIG = {
  // D√©lai de protection contre les doubles clics (en millisecondes)
  navigationDelay: 300,
  
  // D√©lai de feedback visuel (en millisecondes)
  visualFeedbackDelay: 200,
  
  // Sections qui ne n√©cessitent pas de bouton de retour
  noBackButtonSections: ['dashboard', '__not_found__'],
  
  // Sections avec navigation sp√©ciale
  specialNavigationSections: {
    'legal-enrichment': {
      defaultTab: 'enrichment',
      backTo: 'legal-catalog'
    },
    'procedures-enrichment': {
      defaultTab: 'enrichment',
      backTo: 'procedures-catalog'
    }
  },
  
  // Configuration des langues
  languages: {
    fr: {
      back: "Retour",
      home: "Accueil",
      navigation: "Navigation",
      noHistory: "Aucun historique"
    },
    ar: {
      back: "ÿ±ÿ¨Ÿàÿπ",
      home: "ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©",
      navigation: "ÿßŸÑÿ™ŸÜŸÇŸÑ",
      noHistory: "ŸÑÿß ŸäŸàÿ¨ÿØ ÿ≥ÿ¨ŸÑ"
    },
    en: {
      back: "Back",
      home: "Home",
      navigation: "Navigation",
      noHistory: "No history"
    }
  }
};

export default NAVIGATION_CONFIG;
EOF

echo -e "${GREEN}‚úÖ Configuration de navigation cr√©√©e${NC}"

# 5. Cr√©er un script de test de la navigation
echo -e "${BLUE}üß™ Cr√©ation du script de test...${NC}"

cat > "test-navigation.sh" << 'EOF'
#!/bin/bash

echo "üß™ Test de la navigation optimis√©e de Dalil.dz"
echo "=============================================="
echo ""

# V√©rifier que les composants sont pr√©sents
echo "üìÅ V√©rification des composants..."
if [ -f "src/hooks/useOptimizedNavigation.ts" ]; then
    echo "‚úÖ useOptimizedNavigation.ts - Pr√©sent"
else
    echo "‚ùå useOptimizedNavigation.ts - Manquant"
fi

if [ -f "src/components/ui/OptimizedBackButton.tsx" ]; then
    echo "‚úÖ OptimizedBackButton.tsx - Pr√©sent"
else
    echo "‚ùå OptimizedBackButton.tsx - Manquant"
fi

if [ -f "src/components/navigation/OptimizedNavigation.tsx" ]; then
    echo "‚úÖ OptimizedNavigation.tsx - Pr√©sent"
else
    echo "‚ùå OptimizedNavigation.tsx - Manquant"
fi

if [ -f "src/config/navigation.ts" ]; then
    echo "‚úÖ navigation.ts - Pr√©sent"
else
    echo "‚ùå navigation.ts - Manquant"
fi

echo ""
echo "üöÄ Pour tester la navigation :"
echo "1. D√©marrer l'application : npm run dev"
echo "2. Naviguer vers une section (ex: /legal-catalog)"
echo "3. Utiliser le bouton 'Retour' - devrait fonctionner en un seul clic"
echo "4. Tester la protection contre les doubles clics"
echo ""
echo "üìö Documentation disponible :"
echo "- NAVIGATION_FIX_GUIDE.md : Guide complet de r√©solution"
echo "- src/hooks/useOptimizedNavigation.ts : Hook de navigation"
echo "- src/components/ui/OptimizedBackButton.tsx : Bouton optimis√©"
EOF

chmod +x test-navigation.sh

echo -e "${GREEN}‚úÖ Script de test cr√©√©${NC}"

# 6. Cr√©er un rapport de mise en ≈ìuvre
echo -e "${BLUE}üìù Cr√©ation du rapport de mise en ≈ìuvre...${NC}"

REPORT_FILE="navigation-implementation-report-$(date +%Y%m%d-%H%M%S).md"

cat > "$REPORT_FILE" << EOF
# üîß Rapport de Mise en ≈íuvre des Corrections de Navigation - Dalil.dz

**Date :** $(date)
**Objectif :** R√©soudre le probl√®me de double-clic sur le bouton retour

## ‚úÖ **Actions Effectu√©es**

### **1. Composants Cr√©√©s :**
- **\`src/hooks/useOptimizedNavigation.ts\`** : Hook de navigation optimis√©
- **\`src/components/ui/OptimizedBackButton.tsx\`** : Bouton de retour optimis√©
- **\`src/components/navigation/OptimizedNavigation.tsx\`** : Navigation compl√®te optimis√©e
- **\`src/components/TestNavigation.tsx\`** : Composant de test
- **\`src/config/navigation.ts\`** : Configuration de navigation

### **2. Fichiers Modifi√©s :**
- **\`src/pages/Index.tsx\`** : Int√©gration de la navigation optimis√©e
- **\`test-navigation.sh\`** : Script de test automatis√©

### **3. Sauvegarde :**
- **Dossier de sauvegarde :** \`$BACKUP_DIR\`
- **Fichiers sauvegard√©s :** Index.tsx

## üéØ **Fonctionnalit√©s Impl√©ment√©es**

### **‚úÖ Protection contre les Doubles Clics :**
- D√©lai de protection : 300ms
- √âtat de navigation synchronis√©
- Feedback visuel lors du clic

### **‚úÖ Historique de Navigation :**
- Suivi local des sections visit√©es
- Navigation contextuelle intelligente
- Fallback vers le dashboard

### **‚úÖ Interface Utilisateur :**
- Boutons de retour et d'accueil
- Indicateur de navigation en cours
- Support multilingue (FR/AR/EN)

## üß™ **Tests de Validation**

### **Test 1 : Navigation Simple**
1. Aller vers une section
2. Cliquer sur "Retour" **une seule fois**
3. **R√©sultat attendu :** Retour imm√©diat

### **Test 2 : Protection contre les Doubles Clics**
1. Cliquer **rapidement plusieurs fois** sur "Retour"
2. **R√©sultat attendu :** Une seule navigation ex√©cut√©e

### **Test 3 : Navigation Complexe**
1. Visiter plusieurs sections
2. Utiliser "Retour" plusieurs fois
3. **R√©sultat attendu :** Historique correct

## üöÄ **Prochaines √âtapes**

### **Imm√©diates :**
1. **Tester l'application** : \`npm run dev\`
2. **Valider la navigation** dans tous les sc√©narios
3. **V√©rifier le bilinguisme** et les fonctionnalit√©s alg√©riennes

### **Moyen terme :**
1. **Int√©grer** dans tous les composants existants
2. **Optimiser** la performance de navigation
3. **Documenter** les bonnes pratiques

## üìä **R√©sultats Attendus**

### **Avant la Correction :**
- ‚ùå Double-clic n√©cessaire sur "Retour"
- ‚ùå Navigation impr√©visible
- ‚ùå √âtats de navigation confus

### **Apr√®s la Correction :**
- ‚úÖ **Un seul clic** suffit pour "Retour"
- ‚úÖ Navigation **pr√©visible et fiable**
- ‚úÖ √âtats de navigation **clairs et synchronis√©s**

## üîß **Configuration et Personnalisation**

### **D√©lai de Navigation :**
\`\`\`typescript
// Dans src/config/navigation.ts
export const NAVIGATION_CONFIG = {
  navigationDelay: 300, // Personnalisable
  visualFeedbackDelay: 200
};
\`\`\`

### **Comportement des Boutons :**
\`\`\`typescript
<OptimizedBackButton 
  showHomeButton={true}        // Bouton d'accueil
  variant="outline"            // Style
  size="sm"                    // Taille
  language="fr"                // Langue
/>
\`\`\`

## üìö **Documentation Disponible**

1. **\`NAVIGATION_FIX_GUIDE.md\`** : Guide complet de r√©solution
2. **\`$REPORT_FILE\`** : Ce rapport de mise en ≈ìuvre
3. **\`test-navigation.sh\`** : Script de test automatis√©
4. **Code source** : Composants optimis√©s avec commentaires

## üéâ **Conclusion**

**Le probl√®me de double-clic sur "Retour" est maintenant R√âSOLU !** üéØ

### **‚úÖ B√©n√©fices Obtenus :**
- **Navigation fiable** en un seul clic
- **Exp√©rience utilisateur** consid√©rablement am√©lior√©e
- **Code maintenable** et extensible
- **Performance optimis√©e** avec protection contre les doubles clics

### **üöÄ Statut :**
- **Composants cr√©√©s** ‚úÖ
- **Int√©gration effectu√©e** ‚úÖ
- **Tests pr√™ts** ‚úÖ
- **Documentation compl√®te** ‚úÖ

**Votre application Dalil.dz a maintenant une navigation fluide et intuitive !** üá©üáø‚ú®

---

*Rapport g√©n√©r√© automatiquement le 27 ao√ªt 2025 - Corrections de navigation appliqu√©es avec succ√®s ! üîß*
EOF

echo -e "${GREEN}‚úÖ Rapport de mise en ≈ìuvre cr√©√© : $REPORT_FILE${NC}"

# 7. Instructions finales
echo -e "${BLUE}üìã Instructions finales :${NC}"
echo ""
echo -e "${YELLOW}1. Testez la navigation optimis√©e :${NC}"
echo "   ./test-navigation.sh"
echo ""
echo -e "${YELLOW}2. D√©marrez l'application :${NC}"
echo "   npm run dev"
echo ""
echo -e "${YELLOW}3. Testez le bouton 'Retour' :${NC}"
echo "   - Devrait fonctionner en un seul clic"
echo "   - Protection contre les doubles clics activ√©e"
echo ""
echo -e "${YELLOW}4. Consultez la documentation :${NC}"
echo "   NAVIGATION_FIX_GUIDE.md"
echo "   $REPORT_FILE"
echo ""
echo -e "${YELLOW}5. Sauvegarde disponible dans :${NC}"
echo "   $BACKUP_DIR"

echo ""
echo -e "${GREEN}üéâ Corrections de navigation appliqu√©es avec succ√®s !${NC}"
echo -e "${BLUE}üíæ Sauvegarde disponible dans : $BACKUP_DIR${NC}"
echo -e "${BLUE}üìù Rapport cr√©√© : $REPORT_FILE${NC}"