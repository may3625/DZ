import { useState, useCallback } from 'react';
import { logger } from '@/utils/logger';
import { realOCRService, RealOCRResult } from '@/services/realOcrService';
import { useOCRExtractions } from '@/hooks/useRealData';

interface ExtractionResult {
  text: string;
  extractedText?: string; // Ajout pour compatibilit√©
  language?: string; // Ajout pour compatibilit√©
  tables: any[];
  metadata: any;
  confidence: number;
  textLength: number;
  tablesCount: number;
}

export function useOCRExtraction() {
  const [isExtracting, setIsExtracting] = useState(false);
  const [extractionProgress, setExtractionProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(1);
  const [extractionResults, setExtractionResults] = useState<ExtractionResult | null>(null);
  const { saveOCRResult } = useOCRExtractions();

  const extractDocument = useCallback(async (file: File): Promise<ExtractionResult> => {
    setIsExtracting(true);
    setExtractionProgress(0);
    setCurrentStep(1);

    console.log('üîÑ D√©but extraction OCR pour:', file.name, 'Type:', file.type, 'Taille:', file.size);

    // √âtapes r√©elles d'extraction OCR
    const steps = [
      'Initialisation du moteur OCR',
      'Analyse du format de fichier', 
      'Extraction des pages du document',
      'D√©tection de la langue',
      'Reconnaissance optique de caract√®res',
      'Extraction des entit√©s juridiques',
      'Identification des structures',
      'Analyse de la mise en page',
      'D√©tection des tables et tableaux',
      'Validation des donn√©es extraites',
      'Structuration des m√©tadonn√©es',
      'Finalisation de l\'extraction'
    ];

    // Simuler le progr√®s pendant l'extraction r√©elle
    const progressInterval = setInterval(() => {
      setCurrentStep(prev => {
        const next = Math.min(prev + 1, steps.length);
        setExtractionProgress((next / steps.length) * 90); // 90% pour l'extraction
        logger.info('OCR', `√âtape ${next}/${steps.length}: ${steps[next - 1]}`, {}, 'useOCRExtraction');
        return next;
      });
    }, 200); // Progression plus rapide

    try {
      // Utiliser le service OCR 100% R√âEL - AUCUNE SIMULATION JAMAIS
      console.log('üî• D√©but extraction 100% R√âELLE - Z√âRO SIMULATION...');
      
      const realResult: RealOCRResult = await realOCRService.extractText(file);
      
      console.log('‚úÖ Extraction 100% R√âELLE termin√©e:', realResult);
      
      // Cr√©er un adaptateur compatible avec l'ancienne interface
      const entitiesAdapter = {
        decretNumber: realResult.entities.decretNumber || '',
        dateHijri: realResult.entities.dateHijri || '',
        dateGregorian: realResult.entities.dateGregorian || '',
        institution: realResult.entities.institution || '',
        articles: realResult.entities.articles || [],
        signatories: realResult.entities.signatories || [],
        // M√©thodes d'array pour compatibilit√©
        length: 0,
        map: () => [],
        forEach: () => {},
        filter: () => []
      };

      // Sauvegarder simplement le r√©sultat r√©el
      console.log('üíæ Sauvegarde du r√©sultat OCR r√©el...');
      try {
         await saveOCRResult(file.name, {
          text: realResult.text,
          confidence: realResult.confidence,
          language: realResult.language === 'ara' ? 'ara' : realResult.language === 'mixed' ? 'mixed' : 'fra',
          processingTime: realResult.processingTime,
          documentType: realResult.documentType,
           metadata: {
             pageCount: realResult.metadata.pageCount,
             fileSize: realResult.metadata.fileSize,
             extractionDate: realResult.metadata.extractionDate,
             totalCharacters: realResult.metadata.totalCharacters,
             arabicCharacters: realResult.metadata.arabicCharacters,
             frenchCharacters: realResult.metadata.frenchCharacters,
             processingMode: realResult.metadata.processingMode,
             preprocessingType: realResult.metadata.preprocessingType,
             psmUsed: realResult.metadata.psmUsed,
             ocrEngine: realResult.metadata.ocrEngine,
             textRegions: realResult.metadata.textRegions
           },
          entities: entitiesAdapter,
          pages: []
        });
        console.log('‚úÖ Sauvegarde termin√©e');
      } catch (saveError) {
        console.warn('‚ö†Ô∏è Erreur sauvegarde (non bloquante):', saveError);
      }

      // Convertir vers le format attendu par l'interface
      const result: ExtractionResult = {
        text: realResult.text,
        extractedText: realResult.text, // Ajout pour compatibilit√©
        language: realResult.language, // Ajout pour compatibilit√©
        tables: [], // Pas de tables extraites dans cette version simplifi√©e
        metadata: {
          fileName: file.name,
          fileSize: file.size,
          extractionDate: realResult.metadata.extractionDate,
          documentType: realResult.documentType,
          language: realResult.language,
          entities: realResult.entities,
          // D√©tails techniques complets pour l'affichage
          totalCharacters: realResult.metadata.totalCharacters,
          arabicCharacters: realResult.metadata.arabicCharacters,
          frenchCharacters: realResult.metadata.frenchCharacters,
          processingMode: realResult.metadata.processingMode,
          preprocessingType: realResult.metadata.preprocessingType,
          psmUsed: realResult.metadata.psmUsed,
          ocrEngine: realResult.metadata.ocrEngine,
          textRegions: realResult.metadata.textRegions,
          processingTime: realResult.processingTime
        },
        confidence: realResult.confidence,
        textLength: realResult.text.length,
        tablesCount: realResult.entities.articles ? realResult.entities.articles.length : 0
      };

      setExtractionResults(result);
      logger.info('OCR', 'Extraction r√©elle termin√©e avec succ√®s', { result }, 'useOCRExtraction');
      
      return result;

    } catch (error) {
      console.error('‚ùå Erreur dans useOCRExtraction:', error);
      logger.error('OCR', 'Erreur lors de l\'extraction', { error }, 'useOCRExtraction');
      
      // Message d'erreur contextualis√© selon le probl√®me
      let errorMessage = 'Erreur inconnue lors de l\'extraction';
      
      if (error instanceof Error) {
        if (error.message.includes('√âchec initialisation OCR')) {
          errorMessage = `‚ùå ERREUR CRITIQUE: Tesseract.js utilise maintenant les CDN.
          Les services OCR sont disponibles via les CDN officiels de Tesseract.js.`;
        } else {
          errorMessage = `‚ùå ERREUR EXTRACTION R√âELLE: ${error.message}`;
        }
      }
      
      // R√©initialiser l'√©tat en cas d'erreur
      setExtractionProgress(0);
      setCurrentStep(1);
      
      throw new Error(errorMessage);
    } finally {
      // Toujours nettoyer l'√©tat dans le bloc finally
      clearInterval(progressInterval);
      setIsExtracting(false);
      // Ne pas forcer √† 100% en cas d'erreur - g√©r√© dans le catch
      if (extractionProgress > 0) {
        setExtractionProgress(100);
        setCurrentStep(steps.length);
      }
    }
  }, []);

  return {
    isExtracting,
    extractionProgress,
    currentStep,
    extractionResults,
    extractDocument
  };
}